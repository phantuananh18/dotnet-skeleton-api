service: magictree-admin

frameworkVersion: '3'

package:
  individually: false
  patterns: ${file(./.package.functions.js):patterns}

provider:
  name: aws
  runtime: nodejs20.x
  timeout: 30
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    NODE_ENV: ${self:provider.stage}
    API_VERSION: ${self:custom.api-version}
    MYSQL_HOST: ${self:custom.config.mysql.host}
    MYSQL_PORT: ${self:custom.config.mysql.port}
    MYSQL_USERNAME: ${self:custom.config.mysql.username}
    MYSQL_PASSWORD: ${self:custom.config.mysql.password}
    MYSQL_DATABASE: ${self:custom.config.mysql.database}
    ADMIN_USER_POOL_ID: { Ref: AdminUserPool }

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"
    - Effect: Allow
      Action:
        - 's3:*'
      Resource: "*"

functions:
  UserFunction: ${file(./src/functions/user/routes/route.yml)}
  MetadataFunction: ${file(./src/functions/metadata/routes/route.yml)}
  CampaignFunction: ${file(./src/functions/campaign/routes/route.yml)}

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-prune-plugin
  - serverless-plugin-ifelse

resources:
  Resources:
    AdminUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: magic-tree-admin-auth-pool-${self:provider.stage}
        Schema:
          - Name: email
            Required: true
        AutoVerifiedAttributes: ["email"]
        MfaConfiguration: OFF
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT

    AdminUserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: magic-tree-admin-pool-client-${self:provider.stage}
        GenerateSecret: false
        UserPoolId: { Ref: AdminUserPool }
        AccessTokenValidity: 60
        IdTokenValidity: 60
        RefreshTokenValidity: 30
        TokenValidityUnits:
          AccessToken: minutes
          IdToken: minutes
          RefreshToken: days
        ExplicitAuthFlows:
          - "ALLOW_USER_PASSWORD_AUTH"
          - "ALLOW_REFRESH_TOKEN_AUTH"
    
    AdminApiGatewayAuthorizer: 
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        Name: admin-authorizer-${self:provider.stage}
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: 
          Ref: ApiGatewayRestApi
        ProviderARNs: 
          - Fn::GetAtt:
              - AdminUserPool
              - Arn
    
    MagicTreeS3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: magictree-metadata-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

custom:
  config: ${file(./config/${self:provider.stage}.json)}
  api-version: ${file(./.package.functions.js):apiVersion}
  stage: ${opt:stage, self:provider.stage}
  cors:
    origin: ${self:custom.config.apig.origin}
    headers: ${self:custom.config.apig.headers}
  prune:
    automatic: true
    number: 3
  serverlessIfElse:
    - If: '"${opt:stage, self:provider.stage}" == "local"'
      Set:
        provider.environment: ${file(secrets.local.yml)}